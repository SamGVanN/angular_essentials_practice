Fichier de notes du cours prises à la volée
(pourrait être utile)

Projet Angular, pas AngularJS! Qui sont différent


Les fichiers .spec.ts servent à faire des tests


@décorateur -> fonctionnalité TypeScript, pas javascript. Un décorateur permet d’ajouter un comportement spécial ou des métadonnées à un élément du code.

------------------------

Composants = Classe associée à un template avec lequel elle intéragit via une APi spécifique:
    - Le composant définit généralement une portion d'UI
    - Une application Angular est un arbre de composant (un peu comme des poupées russes)



Pour faire apparaitre un composant, on l'inclu dans le composant racine (en tt cas de cas précis) app.component.html


Dans le component.ts on peut créer des variables, qu'on peut utiliser dans le component.html
Autre façon de passer une variable du controller au template, plus spécifique: lorsqu'on souhaite l'attribuer à un attribut, la syntaxe est la suivante :
admetons que l'on ai un attribut "user", on peut lui affecter une valeur, ici de notre variable user, on utilise les crochets
<p user=[user] >
    blabla hello world
</p> 
On utilisera cette fonctionnalité plutôt avec les directives,
mais en tt cas à savoir: on peut passer une variable d'un controller à un composant grâce à cette syntaxe


Angular permet les évenement navigateur genre "click", mais on peut créer nos propres évenements (tout l'intérêt est là).

Pour une img, on utilise le chemin relatif à partir du dossier assets


------------------------

Modules = Containers qui représentent une partie indépendant du code:
    - Permettent de grouper des composants, directives, pipes, et services
    - Peuvent être combinés à d'autres modules pour créer une application
    /!\ Différencier modules JavaScript et Angular


app.module.ts
@NgModule
sert à importer et exporter des éléments au sein de notre application. Il regroupe nos composants etc pour notre module pour les transmettre au compilateur
"declarations"
    regroupe l'ensemble des éléments de notre code source, enfin, pas tous,
    mais une bonne partie des éléments de notre code source, à savoir les composants, les directives et les pipes
 "imports"
    Dans imports, nous avons les imports d'autres modules qui vont être utiles dans notre application

Quand on crée un composant via la CLI, il est ajouté dans la bonne propriété, celle des composants (import le composant)



------------------------------------------------------------------------

DIRECTIVES
----------


DOM = représentation objet de notre HTML

Directives = Classe qui associe un comportement particulier à un élément du DOM:
    - Composant : attache un template à un élément
            (dans notre app.component.html, quand on appel <app-main></app-main>, on attache le template de main à la page, donc ça affiche les éléments de notre main.component.html)
    - Directives Structurelles : changent la disposition d'un DOM
    - Directives d'attributs : changent le comportement d'un élément du DOM


Directives Structurelles:
    syntaxe : *nomDeLaDirective
    existantes: *ngFor, *nglf, *ngSwitch
    "They shape or reshape the DOM's structure, typically by adding, removing, or manipulating elements."
    https://angular.io/guide/structural-directives
    *ngIf conditionne l'affichage d'un élément par exemple



Directives D'attributs:
    syntaxe : nomDeLaDirective, [nomDeLaDirective]
    existantes: ngStyle, ngClass
    Modifie simplement certain attributs des éléments du DOM. "An Attribute directive changes the appearance or behavior of a DOM element."
    https://angular.io/guide/attribute-directives
    Il est possible de créer nos propres directives d'attribut
    ngClass: Le but est d'ajouter ou supprimer dynamiquement une classe à un élément




------------------------


Pipes = Fonction qui retourne un output à partir d'un input et qui peut être déclarée dans un tempalte.
        Sert à formater des variables dans un format qui nous convient, directement dans le template.
        syntaxe : ....|.... (oui, on utilise un pipe pour les pipes, easy!)
        Pipes fournis par Angular: https://angular.io/api -> dans TYPE, sélectionner Pipe
        https://angular.io/api?type=pipe
        


------------------------------------------------------------------------


ROUTING
--------

RouterModule = ça permet à l'utilisateur de naviger sur l'application. Le routeur interprète une URL afin de rendre les composants pertinents
C'est en utilisant correctement le routing qu'on empêche le navigateur de charger tout une page. Or en Angular on dev une SPA donc ce serait con de tout recharger sans raison.
    Configuration : on le configure dans le module avec un tableau d'objets Route. Le routeur supporte les URL dynamique 

ng g c user pour créer un composant
Dans le app.module.ts on crée un tableau d'objet de type 'Route'.
Les objets de type 'Route' ont une propriété qui s'appelle « path », qui est extrêmement importante: c'est notre URL ; c'est l'URL à laquelle on souhaite associer le composant qui nous intéresse.

Dans le app.component.html , ona une balise (qui est là parce qu'en créant le projet via le CLI on a dit oui pour ajouter un router)
<router-outlet></router-outlet>
Cette balise, le router-outlet, va marquer l'endroit où notre application mettra les composants liés à nos URL.
Donc on a plus besoin d'appeler le <app-main> dans le app.component.html puisqu'on a configuré le router pour que par défaut la route soir notre mainComponent

Par contre faut MAJ noter module pour l'importer (le NgModule) OPTIONNEL parce que de base c'est fait qd on crée le route via "ng g c ..." 

Une fois que c'est fait, on peut naviguer : http://localhost:4200/user



------------------------------------------------------------------------

FORMULAIRES:

-----------
directive ngModel
Permet de lier un input à une variable, et d'actualiser cette variable en fonction de l'input entré par l'utilisateur
Avant tout: importer le module (donc dans le app.module.ts)
import { FormsModule } from '@angular/forms';
puis ajouter FormsModule dans la aprtie imports du NgModule

[(NgModel)] -> [] pour variable et () pour évent. En gros NgModel est une variable et l'évent c'est que le user rentre qq chose dans un input 

-----------

Le form model

Modélisation d'un formulaire sous forme d'objet.
Ce qui va nous permettre d'effectuer plusieurs actions telles que traquer les informations insérées par l'utilisateur ou alors, valider si ces informations sont correctes ou non.

-----------

2 approches

Deux approches pour la gestion des formulaires en Angular

Template-driven forms:
    - Logique gérée depuis le template (Angular se débrouille avec le formulaire, il crée un objet et il le map avec le formulaire)
        ---> Formulaires simples

Reactive forms:
    - Logique gérée depuis le contrôleur. (On crée nous mêmes cet objet formulaire dans notre composant et cela nous permettra d'avoir un petit peu plus de contrôle sur ce qui s'y passe)
        ---> Formulaires complexes, potentiellement extensibles


Déclarer un formulaire Reactive Forms:
    FIRST import { ReactiveFormsModule } from '@angular/forms'; dans le app.module.ts
    puis l'ajouter dans nos imports (NgModule)
    Ensuite on peut l'utiliser:
        1) Déclarer dans le composant les classes suivantes
            -> FormControl : unité de base d'un reactive form
            -> FormGroup / FormArray : permettent de grouper des FormControl
        2) Lier les classes déclarées au template


------------------------------------------------------------------------


SERVICES

- Catégorie de code qui repésente une fonctionnalité spécifique
- Augmente la modularité et la factorisation de code
- Angular : possibilité  de mettre ces services à disposition des autres classes par injonction de dépendances

-----------

Injection de dépendances:
    - Pattern, structure de code, dans lequel une classe utilise une dépendance provenant d'une source externe, plutôt que de la créer elle-même
L'idée va un petit peu plus loin que de simplement partager du code: le premier niveau de partage de code serait le suivant :
nous mettons le code concernant notre fonctionnalité dans une classe particulière.
Ici, nous allons un petit peu plus loin : c'est que non seulement, nous mettons dans une classe particulière, mais cette classe, nous allons l'instancier qu'une seule fois.
Et nous injecterons cette classe instanciée dans tous les composants qui en ont besoin.

    - Dans Angular, les dépendances sont fournies par une classe particulère d'objets: les injectors
Injectables : Classe marquée d'un décorateur @Injectable .
    Angular mettra cette classe à la disposition d'un injecteur.
    Un injectabe peut être ensuite injecté dans une classe, par passage en paramètre du constructeur.
    Plusieurs classes utiliseront une instance unique d'un service.

    
-----------

Créer un service:
    - commande : ng g s nomDuService
    - Bonne pratique: mettre les services dans un dossier "service" ou "shared". Si plusieurs services, un dossier par service (2 fichiers)

Injecter un service:
    - Passer le paramètre à notre constructeur (par ex, si mon component user doit utiliser le service, on ajoute le paramètre dans le constructeur de user)

Un service est instancié une seule fois, une seule et unique. Preuve: voir la date qui change avec getDate mais jamais avec date.




------------------------------------------------------------------------


Le service HttpClient

Les applciations front communiquent avec un serveur via le protocole HTTP:
    - Interface XMLHttpRequest, API fetch()
HttpClient est un service proposé par Angular qui offre une API HTTP simplifiée:
    - Requêtes et réponse typées, interception, gestion des erreurs, etc.

Intégrer HttpClient dans notre application:
app.module.ts -> import {HttpClientModule} from '@angular/common/http'; + dans la section des imports du @NgModule


Intégrer le service HttpClient:
Injecter à l'intérieur du composant (ici "train") notre client « HttpClient »,
qui est un service fourni par le module « HttpClientModule », que nous avons intégré à notre « app.module ».


    
-----------
Pattern d'observer/observable
    - Ce pattern d'observable/observer, ça sert à quoi ? Ça sert à gérer des données asynchrones,
    un flux de données qui va apparaître à un moment dans le temps mais on ne sait pas quand.

    D'un côté, nous avons l'observable qui constitue la source de données.
    D'un autre côté, nous avons l'observeur qui, lui, constitue une réponse à cette source de données.

Observable = source de données  (ce que le serveur, l'API suisse nous envoi)
Observer = réponse à cette source de données (fonction à exécuter, le callback)

/!\ Dans RxJS, l'observer ne sera pas une fonction à exécuter,
mais un objet contenant différentes fonctions ou plutôt
différentes méthodes qui seront exécutées en fonction de la réponse de notre source.


Observable.Subscribers = [...]

Observable.Subscribe (observer)
=== Observable.Subscribers = [... , observer]


